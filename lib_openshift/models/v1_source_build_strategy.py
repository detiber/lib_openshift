# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1SourceBuildStrategy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        '_from': 'V1ObjectReference',
        'pull_secret': 'V1LocalObjectReference',
        'env': 'list[V1EnvVar]',
        'scripts': 'str',
        'incremental': 'bool',
        'force_pull': 'bool'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        '_from': 'from',
        'pull_secret': 'pullSecret',
        'env': 'env',
        'scripts': 'scripts',
        'incremental': 'incremental',
        'force_pull': 'forcePull'
    }

    def __init__(self, _from=None, pull_secret=None, env=None, scripts=None, incremental=None, force_pull=None):
        """
        V1SourceBuildStrategy - a model defined in Swagger

        """

        self.__from = _from
        self._pull_secret = pull_secret
        self._env = env
        self._scripts = scripts
        self._incremental = incremental
        self._force_pull = force_pull

    @property
    def _from(self):
        """
        Gets the _from of this V1SourceBuildStrategy.
        From is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled

        :return: The _from of this V1SourceBuildStrategy.
        :rtype: V1ObjectReference
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this V1SourceBuildStrategy.
        From is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the docker image should be pulled

        :param _from: The _from of this V1SourceBuildStrategy.
        :type: V1ObjectReference
        """

        self.__from = _from

    @property
    def pull_secret(self):
        """
        Gets the pull_secret of this V1SourceBuildStrategy.
        PullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries

        :return: The pull_secret of this V1SourceBuildStrategy.
        :rtype: V1LocalObjectReference
        """
        return self._pull_secret

    @pull_secret.setter
    def pull_secret(self, pull_secret):
        """
        Sets the pull_secret of this V1SourceBuildStrategy.
        PullSecret is the name of a Secret that would be used for setting up the authentication for pulling the Docker images from the private Docker registries

        :param pull_secret: The pull_secret of this V1SourceBuildStrategy.
        :type: V1LocalObjectReference
        """

        self._pull_secret = pull_secret

    @property
    def env(self):
        """
        Gets the env of this V1SourceBuildStrategy.
        Env contains additional environment variables you want to pass into a builder container

        :return: The env of this V1SourceBuildStrategy.
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """
        Sets the env of this V1SourceBuildStrategy.
        Env contains additional environment variables you want to pass into a builder container

        :param env: The env of this V1SourceBuildStrategy.
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def scripts(self):
        """
        Gets the scripts of this V1SourceBuildStrategy.
        Scripts is the location of Source scripts

        :return: The scripts of this V1SourceBuildStrategy.
        :rtype: str
        """
        return self._scripts

    @scripts.setter
    def scripts(self, scripts):
        """
        Sets the scripts of this V1SourceBuildStrategy.
        Scripts is the location of Source scripts

        :param scripts: The scripts of this V1SourceBuildStrategy.
        :type: str
        """

        self._scripts = scripts

    @property
    def incremental(self):
        """
        Gets the incremental of this V1SourceBuildStrategy.
        Incremental flag forces the Source build to do incremental builds if true.

        :return: The incremental of this V1SourceBuildStrategy.
        :rtype: bool
        """
        return self._incremental

    @incremental.setter
    def incremental(self, incremental):
        """
        Sets the incremental of this V1SourceBuildStrategy.
        Incremental flag forces the Source build to do incremental builds if true.

        :param incremental: The incremental of this V1SourceBuildStrategy.
        :type: bool
        """

        self._incremental = incremental

    @property
    def force_pull(self):
        """
        Gets the force_pull of this V1SourceBuildStrategy.
        ForcePull describes if the builder should pull the images from registry prior to building.

        :return: The force_pull of this V1SourceBuildStrategy.
        :rtype: bool
        """
        return self._force_pull

    @force_pull.setter
    def force_pull(self, force_pull):
        """
        Sets the force_pull of this V1SourceBuildStrategy.
        ForcePull describes if the builder should pull the images from registry prior to building.

        :param force_pull: The force_pull of this V1SourceBuildStrategy.
        :type: bool
        """

        self._force_pull = force_pull

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1SourceBuildStrategy.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
