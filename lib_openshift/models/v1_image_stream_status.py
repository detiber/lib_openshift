# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ImageStreamStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'docker_image_repository': 'str',
        'tags': 'list[V1NamedTagEventList]'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'docker_image_repository': 'dockerImageRepository',
        'tags': 'tags'
    }

    def __init__(self, docker_image_repository=None, tags=None):
        """
        V1ImageStreamStatus - a model defined in Swagger

        """

        self._docker_image_repository = docker_image_repository
        self._tags = tags

    @property
    def docker_image_repository(self):
        """
        Gets the docker_image_repository of this V1ImageStreamStatus.
        DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located

        :return: The docker_image_repository of this V1ImageStreamStatus.
        :rtype: str
        """
        return self._docker_image_repository

    @docker_image_repository.setter
    def docker_image_repository(self, docker_image_repository):
        """
        Sets the docker_image_repository of this V1ImageStreamStatus.
        DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located

        :param docker_image_repository: The docker_image_repository of this V1ImageStreamStatus.
        :type: str
        """

        self._docker_image_repository = docker_image_repository

    @property
    def tags(self):
        """
        Gets the tags of this V1ImageStreamStatus.
        Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.

        :return: The tags of this V1ImageStreamStatus.
        :rtype: list[V1NamedTagEventList]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this V1ImageStreamStatus.
        Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.

        :param tags: The tags of this V1ImageStreamStatus.
        :type: list[V1NamedTagEventList]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1ImageStreamStatus.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
