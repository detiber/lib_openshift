# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1RunAsUserStrategyOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'type': 'str',
        'uid': 'int',
        'uid_range_min': 'int',
        'uid_range_max': 'int'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'type': 'type',
        'uid': 'uid',
        'uid_range_min': 'uidRangeMin',
        'uid_range_max': 'uidRangeMax'
    }

    def __init__(self, type=None, uid=None, uid_range_min=None, uid_range_max=None):
        """
        V1RunAsUserStrategyOptions - a model defined in Swagger

        """

        self._type = type
        self._uid = uid
        self._uid_range_min = uid_range_min
        self._uid_range_max = uid_range_max

    @property
    def type(self):
        """
        Gets the type of this V1RunAsUserStrategyOptions.
        Type is the strategy that will dictate what RunAsUser is used in the SecurityContext.

        :return: The type of this V1RunAsUserStrategyOptions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1RunAsUserStrategyOptions.
        Type is the strategy that will dictate what RunAsUser is used in the SecurityContext.

        :param type: The type of this V1RunAsUserStrategyOptions.
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """
        Gets the uid of this V1RunAsUserStrategyOptions.
        UID is the user id that containers must run as.  Required for the MustRunAs strategy if not using namespace/service account allocated uids.

        :return: The uid of this V1RunAsUserStrategyOptions.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this V1RunAsUserStrategyOptions.
        UID is the user id that containers must run as.  Required for the MustRunAs strategy if not using namespace/service account allocated uids.

        :param uid: The uid of this V1RunAsUserStrategyOptions.
        :type: int
        """

        self._uid = uid

    @property
    def uid_range_min(self):
        """
        Gets the uid_range_min of this V1RunAsUserStrategyOptions.
        UIDRangeMin defines the min value for a strategy that allocates by range.

        :return: The uid_range_min of this V1RunAsUserStrategyOptions.
        :rtype: int
        """
        return self._uid_range_min

    @uid_range_min.setter
    def uid_range_min(self, uid_range_min):
        """
        Sets the uid_range_min of this V1RunAsUserStrategyOptions.
        UIDRangeMin defines the min value for a strategy that allocates by range.

        :param uid_range_min: The uid_range_min of this V1RunAsUserStrategyOptions.
        :type: int
        """

        self._uid_range_min = uid_range_min

    @property
    def uid_range_max(self):
        """
        Gets the uid_range_max of this V1RunAsUserStrategyOptions.
        UIDRangeMax defines the max value for a strategy that allocates by range.

        :return: The uid_range_max of this V1RunAsUserStrategyOptions.
        :rtype: int
        """
        return self._uid_range_max

    @uid_range_max.setter
    def uid_range_max(self, uid_range_max):
        """
        Sets the uid_range_max of this V1RunAsUserStrategyOptions.
        UIDRangeMax defines the max value for a strategy that allocates by range.

        :param uid_range_max: The uid_range_max of this V1RunAsUserStrategyOptions.
        :type: int
        """

        self._uid_range_max = uid_range_max

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1RunAsUserStrategyOptions.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
