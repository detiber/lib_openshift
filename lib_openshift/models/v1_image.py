# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1Image(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
        {
            'class': 'OapiV1',
            'type': 'update',
            'method': 'replace_image',
            'namespaced': False
        },
        {
            'class': 'OapiV1',
            'type': 'delete',
            'method': 'delete_image',
            'namespaced': False
        },
        {
            'class': 'OapiV1',
            'type': 'read',
            'method': 'get_image',
            'namespaced': False
        },
        {
            'class': 'OapiV1',
            'type': 'create',
            'method': 'create_image',
            'namespaced': False
        },
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'kind': 'str',
        'api_version': 'str',
        'metadata': 'V1ObjectMeta',
        'docker_image_reference': 'str',
        'docker_image_metadata': 'str',
        'docker_image_metadata_version': 'str',
        'docker_image_manifest': 'str',
        'docker_image_layers': 'list[V1ImageLayer]'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'kind': 'kind',
        'api_version': 'apiVersion',
        'metadata': 'metadata',
        'docker_image_reference': 'dockerImageReference',
        'docker_image_metadata': 'dockerImageMetadata',
        'docker_image_metadata_version': 'dockerImageMetadataVersion',
        'docker_image_manifest': 'dockerImageManifest',
        'docker_image_layers': 'dockerImageLayers'
    }

    def __init__(self, kind=None, api_version=None, metadata=None, docker_image_reference=None, docker_image_metadata=None, docker_image_metadata_version=None, docker_image_manifest=None, docker_image_layers=None):
        """
        V1Image - a model defined in Swagger

        """

        self._kind = kind
        self._api_version = api_version
        self._metadata = metadata
        self._docker_image_reference = docker_image_reference
        self._docker_image_metadata = docker_image_metadata
        self._docker_image_metadata_version = docker_image_metadata_version
        self._docker_image_manifest = docker_image_manifest
        self._docker_image_layers = docker_image_layers

    @property
    def kind(self):
        """
        Gets the kind of this V1Image.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#types-kinds

        :return: The kind of this V1Image.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this V1Image.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#types-kinds

        :param kind: The kind of this V1Image.
        :type: str
        """

        self._kind = kind

    @property
    def api_version(self):
        """
        Gets the api_version of this V1Image.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#resources

        :return: The api_version of this V1Image.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this V1Image.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#resources

        :param api_version: The api_version of this V1Image.
        :type: str
        """

        self._api_version = api_version

    @property
    def metadata(self):
        """
        Gets the metadata of this V1Image.
        Standard object's metadata.

        :return: The metadata of this V1Image.
        :rtype: V1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this V1Image.
        Standard object's metadata.

        :param metadata: The metadata of this V1Image.
        :type: V1ObjectMeta
        """

        self._metadata = metadata

    @property
    def docker_image_reference(self):
        """
        Gets the docker_image_reference of this V1Image.
        DockerImageReference is the string that can be used to pull this image.

        :return: The docker_image_reference of this V1Image.
        :rtype: str
        """
        return self._docker_image_reference

    @docker_image_reference.setter
    def docker_image_reference(self, docker_image_reference):
        """
        Sets the docker_image_reference of this V1Image.
        DockerImageReference is the string that can be used to pull this image.

        :param docker_image_reference: The docker_image_reference of this V1Image.
        :type: str
        """

        self._docker_image_reference = docker_image_reference

    @property
    def docker_image_metadata(self):
        """
        Gets the docker_image_metadata of this V1Image.
        DockerImageMetadata contains metadata about this image

        :return: The docker_image_metadata of this V1Image.
        :rtype: str
        """
        return self._docker_image_metadata

    @docker_image_metadata.setter
    def docker_image_metadata(self, docker_image_metadata):
        """
        Sets the docker_image_metadata of this V1Image.
        DockerImageMetadata contains metadata about this image

        :param docker_image_metadata: The docker_image_metadata of this V1Image.
        :type: str
        """

        self._docker_image_metadata = docker_image_metadata

    @property
    def docker_image_metadata_version(self):
        """
        Gets the docker_image_metadata_version of this V1Image.
        DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"

        :return: The docker_image_metadata_version of this V1Image.
        :rtype: str
        """
        return self._docker_image_metadata_version

    @docker_image_metadata_version.setter
    def docker_image_metadata_version(self, docker_image_metadata_version):
        """
        Sets the docker_image_metadata_version of this V1Image.
        DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"

        :param docker_image_metadata_version: The docker_image_metadata_version of this V1Image.
        :type: str
        """

        self._docker_image_metadata_version = docker_image_metadata_version

    @property
    def docker_image_manifest(self):
        """
        Gets the docker_image_manifest of this V1Image.
        DockerImageManifest is the raw JSON of the manifest

        :return: The docker_image_manifest of this V1Image.
        :rtype: str
        """
        return self._docker_image_manifest

    @docker_image_manifest.setter
    def docker_image_manifest(self, docker_image_manifest):
        """
        Sets the docker_image_manifest of this V1Image.
        DockerImageManifest is the raw JSON of the manifest

        :param docker_image_manifest: The docker_image_manifest of this V1Image.
        :type: str
        """

        self._docker_image_manifest = docker_image_manifest

    @property
    def docker_image_layers(self):
        """
        Gets the docker_image_layers of this V1Image.
        DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.

        :return: The docker_image_layers of this V1Image.
        :rtype: list[V1ImageLayer]
        """
        return self._docker_image_layers

    @docker_image_layers.setter
    def docker_image_layers(self, docker_image_layers):
        """
        Sets the docker_image_layers of this V1Image.
        DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.

        :param docker_image_layers: The docker_image_layers of this V1Image.
        :type: list[V1ImageLayer]
        """

        self._docker_image_layers = docker_image_layers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1Image.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
