# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1RouteIngress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'host': 'str',
        'router_name': 'str',
        'conditions': 'list[V1RouteIngressCondition]'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'host': 'host',
        'router_name': 'routerName',
        'conditions': 'conditions'
    }

    def __init__(self, host=None, router_name=None, conditions=None):
        """
        V1RouteIngress - a model defined in Swagger

        """

        self._host = host
        self._router_name = router_name
        self._conditions = conditions

    @property
    def host(self):
        """
        Gets the host of this V1RouteIngress.
        Host is the host string under which the route is exposed; this value is required

        :return: The host of this V1RouteIngress.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this V1RouteIngress.
        Host is the host string under which the route is exposed; this value is required

        :param host: The host of this V1RouteIngress.
        :type: str
        """

        self._host = host

    @property
    def router_name(self):
        """
        Gets the router_name of this V1RouteIngress.
        Name is a name chosen by the router to identify itself; this value is required

        :return: The router_name of this V1RouteIngress.
        :rtype: str
        """
        return self._router_name

    @router_name.setter
    def router_name(self, router_name):
        """
        Sets the router_name of this V1RouteIngress.
        Name is a name chosen by the router to identify itself; this value is required

        :param router_name: The router_name of this V1RouteIngress.
        :type: str
        """

        self._router_name = router_name

    @property
    def conditions(self):
        """
        Gets the conditions of this V1RouteIngress.
        Conditions is the state of the route, may be empty.

        :return: The conditions of this V1RouteIngress.
        :rtype: list[V1RouteIngressCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this V1RouteIngress.
        Conditions is the state of the route, may be empty.

        :param conditions: The conditions of this V1RouteIngress.
        :type: list[V1RouteIngressCondition]
        """

        self._conditions = conditions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1RouteIngress.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
