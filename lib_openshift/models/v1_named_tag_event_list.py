# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1NamedTagEventList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'tag': 'str',
        'items': 'list[V1TagEvent]',
        'conditions': 'list[V1TagEventCondition]'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'tag': 'tag',
        'items': 'items',
        'conditions': 'conditions'
    }

    def __init__(self, tag=None, items=None, conditions=None):
        """
        V1NamedTagEventList - a model defined in Swagger

        """

        self._tag = tag
        self._items = items
        self._conditions = conditions

    @property
    def tag(self):
        """
        Gets the tag of this V1NamedTagEventList.
        Tag is the tag for which the history is recorded

        :return: The tag of this V1NamedTagEventList.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this V1NamedTagEventList.
        Tag is the tag for which the history is recorded

        :param tag: The tag of this V1NamedTagEventList.
        :type: str
        """

        self._tag = tag

    @property
    def items(self):
        """
        Gets the items of this V1NamedTagEventList.
        Standard object's metadata.

        :return: The items of this V1NamedTagEventList.
        :rtype: list[V1TagEvent]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this V1NamedTagEventList.
        Standard object's metadata.

        :param items: The items of this V1NamedTagEventList.
        :type: list[V1TagEvent]
        """

        self._items = items

    @property
    def conditions(self):
        """
        Gets the conditions of this V1NamedTagEventList.
        Conditions is an array of conditions that apply to the tag event list.

        :return: The conditions of this V1NamedTagEventList.
        :rtype: list[V1TagEventCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this V1NamedTagEventList.
        Conditions is an array of conditions that apply to the tag event list.

        :param conditions: The conditions of this V1NamedTagEventList.
        :type: list[V1TagEventCondition]
        """

        self._conditions = conditions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1NamedTagEventList.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
