# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1TLSConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'termination': 'str',
        'certificate': 'str',
        'key': 'str',
        'ca_certificate': 'str',
        'destination_ca_certificate': 'str',
        'insecure_edge_termination_policy': 'str'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'termination': 'termination',
        'certificate': 'certificate',
        'key': 'key',
        'ca_certificate': 'caCertificate',
        'destination_ca_certificate': 'destinationCACertificate',
        'insecure_edge_termination_policy': 'insecureEdgeTerminationPolicy'
    }

    def __init__(self, termination=None, certificate=None, key=None, ca_certificate=None, destination_ca_certificate=None, insecure_edge_termination_policy=None):
        """
        V1TLSConfig - a model defined in Swagger

        """

        self._termination = termination
        self._certificate = certificate
        self._key = key
        self._ca_certificate = ca_certificate
        self._destination_ca_certificate = destination_ca_certificate
        self._insecure_edge_termination_policy = insecure_edge_termination_policy

    @property
    def termination(self):
        """
        Gets the termination of this V1TLSConfig.
        Termination indicates termination type.

        :return: The termination of this V1TLSConfig.
        :rtype: str
        """
        return self._termination

    @termination.setter
    def termination(self, termination):
        """
        Sets the termination of this V1TLSConfig.
        Termination indicates termination type.

        :param termination: The termination of this V1TLSConfig.
        :type: str
        """

        self._termination = termination

    @property
    def certificate(self):
        """
        Gets the certificate of this V1TLSConfig.
        Certificate provides certificate contents

        :return: The certificate of this V1TLSConfig.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """
        Sets the certificate of this V1TLSConfig.
        Certificate provides certificate contents

        :param certificate: The certificate of this V1TLSConfig.
        :type: str
        """

        self._certificate = certificate

    @property
    def key(self):
        """
        Gets the key of this V1TLSConfig.
        Key provides key file contents

        :return: The key of this V1TLSConfig.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this V1TLSConfig.
        Key provides key file contents

        :param key: The key of this V1TLSConfig.
        :type: str
        """

        self._key = key

    @property
    def ca_certificate(self):
        """
        Gets the ca_certificate of this V1TLSConfig.
        CACertificate provides the cert authority certificate contents

        :return: The ca_certificate of this V1TLSConfig.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """
        Sets the ca_certificate of this V1TLSConfig.
        CACertificate provides the cert authority certificate contents

        :param ca_certificate: The ca_certificate of this V1TLSConfig.
        :type: str
        """

        self._ca_certificate = ca_certificate

    @property
    def destination_ca_certificate(self):
        """
        Gets the destination_ca_certificate of this V1TLSConfig.
        DestinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection

        :return: The destination_ca_certificate of this V1TLSConfig.
        :rtype: str
        """
        return self._destination_ca_certificate

    @destination_ca_certificate.setter
    def destination_ca_certificate(self, destination_ca_certificate):
        """
        Sets the destination_ca_certificate of this V1TLSConfig.
        DestinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection

        :param destination_ca_certificate: The destination_ca_certificate of this V1TLSConfig.
        :type: str
        """

        self._destination_ca_certificate = destination_ca_certificate

    @property
    def insecure_edge_termination_policy(self):
        """
        Gets the insecure_edge_termination_policy of this V1TLSConfig.
        InsecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to an edge-terminated route:   disable, allow or redirect

        :return: The insecure_edge_termination_policy of this V1TLSConfig.
        :rtype: str
        """
        return self._insecure_edge_termination_policy

    @insecure_edge_termination_policy.setter
    def insecure_edge_termination_policy(self, insecure_edge_termination_policy):
        """
        Sets the insecure_edge_termination_policy of this V1TLSConfig.
        InsecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to an edge-terminated route:   disable, allow or redirect

        :param insecure_edge_termination_policy: The insecure_edge_termination_policy of this V1TLSConfig.
        :type: str
        """

        self._insecure_edge_termination_policy = insecure_edge_termination_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1TLSConfig.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
