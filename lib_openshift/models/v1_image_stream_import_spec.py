# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ImageStreamImportSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        '_import': 'bool',
        'repository': 'V1RepositoryImportSpec',
        'images': 'list[V1ImageImportSpec]'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        '_import': 'import',
        'repository': 'repository',
        'images': 'images'
    }

    def __init__(self, _import=None, repository=None, images=None):
        """
        V1ImageStreamImportSpec - a model defined in Swagger

        """

        self.__import = _import
        self._repository = repository
        self._images = images

    @property
    def _import(self):
        """
        Gets the _import of this V1ImageStreamImportSpec.
        Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.

        :return: The _import of this V1ImageStreamImportSpec.
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """
        Sets the _import of this V1ImageStreamImportSpec.
        Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.

        :param _import: The _import of this V1ImageStreamImportSpec.
        :type: bool
        """

        self.__import = _import

    @property
    def repository(self):
        """
        Gets the repository of this V1ImageStreamImportSpec.
        Repository is an optional import of an entire Docker image repository. A maximum limit on the number of tags imported this way is imposed by the server.

        :return: The repository of this V1ImageStreamImportSpec.
        :rtype: V1RepositoryImportSpec
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """
        Sets the repository of this V1ImageStreamImportSpec.
        Repository is an optional import of an entire Docker image repository. A maximum limit on the number of tags imported this way is imposed by the server.

        :param repository: The repository of this V1ImageStreamImportSpec.
        :type: V1RepositoryImportSpec
        """

        self._repository = repository

    @property
    def images(self):
        """
        Gets the images of this V1ImageStreamImportSpec.
        Images are a list of individual images to import.

        :return: The images of this V1ImageStreamImportSpec.
        :rtype: list[V1ImageImportSpec]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this V1ImageStreamImportSpec.
        Images are a list of individual images to import.

        :param images: The images of this V1ImageStreamImportSpec.
        :type: list[V1ImageImportSpec]
        """

        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1ImageStreamImportSpec.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
