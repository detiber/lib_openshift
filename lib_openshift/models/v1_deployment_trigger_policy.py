# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1DeploymentTriggerPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'type': 'str',
        'image_change_params': 'V1DeploymentTriggerImageChangeParams'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'type': 'type',
        'image_change_params': 'imageChangeParams'
    }

    def __init__(self, type=None, image_change_params=None):
        """
        V1DeploymentTriggerPolicy - a model defined in Swagger

        """

        self._type = type
        self._image_change_params = image_change_params

    @property
    def type(self):
        """
        Gets the type of this V1DeploymentTriggerPolicy.
        Type of the trigger

        :return: The type of this V1DeploymentTriggerPolicy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this V1DeploymentTriggerPolicy.
        Type of the trigger

        :param type: The type of this V1DeploymentTriggerPolicy.
        :type: str
        """

        self._type = type

    @property
    def image_change_params(self):
        """
        Gets the image_change_params of this V1DeploymentTriggerPolicy.
        ImageChangeParams represents the parameters for the ImageChange trigger.

        :return: The image_change_params of this V1DeploymentTriggerPolicy.
        :rtype: V1DeploymentTriggerImageChangeParams
        """
        return self._image_change_params

    @image_change_params.setter
    def image_change_params(self, image_change_params):
        """
        Sets the image_change_params of this V1DeploymentTriggerPolicy.
        ImageChangeParams represents the parameters for the ImageChange trigger.

        :param image_change_params: The image_change_params of this V1DeploymentTriggerPolicy.
        :type: V1DeploymentTriggerImageChangeParams
        """

        self._image_change_params = image_change_params

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1DeploymentTriggerPolicy.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
