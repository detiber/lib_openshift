# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1Identity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'kind': 'str',
        'api_version': 'str',
        'metadata': 'V1ObjectMeta',
        'provider_name': 'str',
        'provider_user_name': 'str',
        'user': 'V1ObjectReference',
        'extra': 'object'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'kind': 'kind',
        'api_version': 'apiVersion',
        'metadata': 'metadata',
        'provider_name': 'providerName',
        'provider_user_name': 'providerUserName',
        'user': 'user',
        'extra': 'extra'
    }

    def __init__(self, kind=None, api_version=None, metadata=None, provider_name=None, provider_user_name=None, user=None, extra=None):
        """
        V1Identity - a model defined in Swagger

        """

        self._kind = kind
        self._api_version = api_version
        self._metadata = metadata
        self._provider_name = provider_name
        self._provider_user_name = provider_user_name
        self._user = user
        self._extra = extra

    @property
    def kind(self):
        """
        Gets the kind of this V1Identity.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#types-kinds

        :return: The kind of this V1Identity.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this V1Identity.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#types-kinds

        :param kind: The kind of this V1Identity.
        :type: str
        """

        self._kind = kind

    @property
    def api_version(self):
        """
        Gets the api_version of this V1Identity.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#resources

        :return: The api_version of this V1Identity.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this V1Identity.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#resources

        :param api_version: The api_version of this V1Identity.
        :type: str
        """

        self._api_version = api_version

    @property
    def metadata(self):
        """
        Gets the metadata of this V1Identity.
        Standard object's metadata.

        :return: The metadata of this V1Identity.
        :rtype: V1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this V1Identity.
        Standard object's metadata.

        :param metadata: The metadata of this V1Identity.
        :type: V1ObjectMeta
        """

        self._metadata = metadata

    @property
    def provider_name(self):
        """
        Gets the provider_name of this V1Identity.
        ProviderName is the source of identity information

        :return: The provider_name of this V1Identity.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """
        Sets the provider_name of this V1Identity.
        ProviderName is the source of identity information

        :param provider_name: The provider_name of this V1Identity.
        :type: str
        """

        self._provider_name = provider_name

    @property
    def provider_user_name(self):
        """
        Gets the provider_user_name of this V1Identity.
        ProviderUserName uniquely represents this identity in the scope of the provider

        :return: The provider_user_name of this V1Identity.
        :rtype: str
        """
        return self._provider_user_name

    @provider_user_name.setter
    def provider_user_name(self, provider_user_name):
        """
        Sets the provider_user_name of this V1Identity.
        ProviderUserName uniquely represents this identity in the scope of the provider

        :param provider_user_name: The provider_user_name of this V1Identity.
        :type: str
        """

        self._provider_user_name = provider_user_name

    @property
    def user(self):
        """
        Gets the user of this V1Identity.
        User is a reference to the user this identity is associated with Both Name and UID must be set

        :return: The user of this V1Identity.
        :rtype: V1ObjectReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this V1Identity.
        User is a reference to the user this identity is associated with Both Name and UID must be set

        :param user: The user of this V1Identity.
        :type: V1ObjectReference
        """

        self._user = user

    @property
    def extra(self):
        """
        Gets the extra of this V1Identity.
        Extra holds extra information about this identity

        :return: The extra of this V1Identity.
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """
        Sets the extra of this V1Identity.
        Extra holds extra information about this identity

        :param extra: The extra of this V1Identity.
        :type: object
        """

        self._extra = extra

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1Identity.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
