# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1BuildRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'kind': 'str',
        'api_version': 'str',
        'metadata': 'V1ObjectMeta',
        'revision': 'V1SourceRevision',
        'triggered_by_image': 'V1ObjectReference',
        '_from': 'V1ObjectReference',
        'binary': 'V1BinaryBuildSource',
        'last_version': 'int',
        'env': 'list[V1EnvVar]'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'kind': 'kind',
        'api_version': 'apiVersion',
        'metadata': 'metadata',
        'revision': 'revision',
        'triggered_by_image': 'triggeredByImage',
        '_from': 'from',
        'binary': 'binary',
        'last_version': 'lastVersion',
        'env': 'env'
    }

    def __init__(self, kind=None, api_version=None, metadata=None, revision=None, triggered_by_image=None, _from=None, binary=None, last_version=None, env=None):
        """
        V1BuildRequest - a model defined in Swagger

        """

        self._kind = kind
        self._api_version = api_version
        self._metadata = metadata
        self._revision = revision
        self._triggered_by_image = triggered_by_image
        self.__from = _from
        self._binary = binary
        self._last_version = last_version
        self._env = env

    @property
    def kind(self):
        """
        Gets the kind of this V1BuildRequest.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#types-kinds

        :return: The kind of this V1BuildRequest.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this V1BuildRequest.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#types-kinds

        :param kind: The kind of this V1BuildRequest.
        :type: str
        """

        self._kind = kind

    @property
    def api_version(self):
        """
        Gets the api_version of this V1BuildRequest.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#resources

        :return: The api_version of this V1BuildRequest.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this V1BuildRequest.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.2/docs/devel/api-conventions.md#resources

        :param api_version: The api_version of this V1BuildRequest.
        :type: str
        """

        self._api_version = api_version

    @property
    def metadata(self):
        """
        Gets the metadata of this V1BuildRequest.
        Standard object's metadata.

        :return: The metadata of this V1BuildRequest.
        :rtype: V1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this V1BuildRequest.
        Standard object's metadata.

        :param metadata: The metadata of this V1BuildRequest.
        :type: V1ObjectMeta
        """

        self._metadata = metadata

    @property
    def revision(self):
        """
        Gets the revision of this V1BuildRequest.
        Revision is the information from the source for a specific repo snapshot.

        :return: The revision of this V1BuildRequest.
        :rtype: V1SourceRevision
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this V1BuildRequest.
        Revision is the information from the source for a specific repo snapshot.

        :param revision: The revision of this V1BuildRequest.
        :type: V1SourceRevision
        """

        self._revision = revision

    @property
    def triggered_by_image(self):
        """
        Gets the triggered_by_image of this V1BuildRequest.
        TriggeredByImage is the Image that triggered this build.

        :return: The triggered_by_image of this V1BuildRequest.
        :rtype: V1ObjectReference
        """
        return self._triggered_by_image

    @triggered_by_image.setter
    def triggered_by_image(self, triggered_by_image):
        """
        Sets the triggered_by_image of this V1BuildRequest.
        TriggeredByImage is the Image that triggered this build.

        :param triggered_by_image: The triggered_by_image of this V1BuildRequest.
        :type: V1ObjectReference
        """

        self._triggered_by_image = triggered_by_image

    @property
    def _from(self):
        """
        Gets the _from of this V1BuildRequest.
        From is the reference to the ImageStreamTag that triggered the build.

        :return: The _from of this V1BuildRequest.
        :rtype: V1ObjectReference
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this V1BuildRequest.
        From is the reference to the ImageStreamTag that triggered the build.

        :param _from: The _from of this V1BuildRequest.
        :type: V1ObjectReference
        """

        self.__from = _from

    @property
    def binary(self):
        """
        Gets the binary of this V1BuildRequest.
        Binary indicates a request to build from a binary provided to the builder

        :return: The binary of this V1BuildRequest.
        :rtype: V1BinaryBuildSource
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """
        Sets the binary of this V1BuildRequest.
        Binary indicates a request to build from a binary provided to the builder

        :param binary: The binary of this V1BuildRequest.
        :type: V1BinaryBuildSource
        """

        self._binary = binary

    @property
    def last_version(self):
        """
        Gets the last_version of this V1BuildRequest.
        LastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.

        :return: The last_version of this V1BuildRequest.
        :rtype: int
        """
        return self._last_version

    @last_version.setter
    def last_version(self, last_version):
        """
        Sets the last_version of this V1BuildRequest.
        LastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.

        :param last_version: The last_version of this V1BuildRequest.
        :type: int
        """

        self._last_version = last_version

    @property
    def env(self):
        """
        Gets the env of this V1BuildRequest.
        Env contains additional environment variables you want to pass into a builder container

        :return: The env of this V1BuildRequest.
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """
        Sets the env of this V1BuildRequest.
        Env contains additional environment variables you want to pass into a builder container

        :param env: The env of this V1BuildRequest.
        :type: list[V1EnvVar]
        """

        self._env = env

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1BuildRequest.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
