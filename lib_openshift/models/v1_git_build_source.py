# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1GitBuildSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'uri': 'str',
        'ref': 'str',
        'http_proxy': 'str',
        'https_proxy': 'str'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'uri': 'uri',
        'ref': 'ref',
        'http_proxy': 'httpProxy',
        'https_proxy': 'httpsProxy'
    }

    def __init__(self, uri=None, ref=None, http_proxy=None, https_proxy=None):
        """
        V1GitBuildSource - a model defined in Swagger

        """

        self._uri = uri
        self._ref = ref
        self._http_proxy = http_proxy
        self._https_proxy = https_proxy

    @property
    def uri(self):
        """
        Gets the uri of this V1GitBuildSource.
        URI points to the source that will be built. The structure of the source will depend on the type of build to run

        :return: The uri of this V1GitBuildSource.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this V1GitBuildSource.
        URI points to the source that will be built. The structure of the source will depend on the type of build to run

        :param uri: The uri of this V1GitBuildSource.
        :type: str
        """

        self._uri = uri

    @property
    def ref(self):
        """
        Gets the ref of this V1GitBuildSource.
        Ref is the branch/tag/ref to build.

        :return: The ref of this V1GitBuildSource.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """
        Sets the ref of this V1GitBuildSource.
        Ref is the branch/tag/ref to build.

        :param ref: The ref of this V1GitBuildSource.
        :type: str
        """

        self._ref = ref

    @property
    def http_proxy(self):
        """
        Gets the http_proxy of this V1GitBuildSource.
        HTTPProxy is a proxy used to reach the git repository over http

        :return: The http_proxy of this V1GitBuildSource.
        :rtype: str
        """
        return self._http_proxy

    @http_proxy.setter
    def http_proxy(self, http_proxy):
        """
        Sets the http_proxy of this V1GitBuildSource.
        HTTPProxy is a proxy used to reach the git repository over http

        :param http_proxy: The http_proxy of this V1GitBuildSource.
        :type: str
        """

        self._http_proxy = http_proxy

    @property
    def https_proxy(self):
        """
        Gets the https_proxy of this V1GitBuildSource.
        HTTPSProxy is a proxy used to reach the git repository over https

        :return: The https_proxy of this V1GitBuildSource.
        :rtype: str
        """
        return self._https_proxy

    @https_proxy.setter
    def https_proxy(self, https_proxy):
        """
        Sets the https_proxy of this V1GitBuildSource.
        HTTPSProxy is a proxy used to reach the git repository over https

        :param https_proxy: The https_proxy of this V1GitBuildSource.
        :type: str
        """

        self._https_proxy = https_proxy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1GitBuildSource.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
