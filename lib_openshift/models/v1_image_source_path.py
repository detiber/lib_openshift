# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ImageSourcePath(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'source_path': 'str',
        'destination_dir': 'str'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'source_path': 'sourcePath',
        'destination_dir': 'destinationDir'
    }

    def __init__(self, source_path=None, destination_dir=None):
        """
        V1ImageSourcePath - a model defined in Swagger

        """

        self._source_path = source_path
        self._destination_dir = destination_dir

    @property
    def source_path(self):
        """
        Gets the source_path of this V1ImageSourcePath.
        SourcePath is the absolute path of the file or directory inside the image to copy to the build directory.

        :return: The source_path of this V1ImageSourcePath.
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """
        Sets the source_path of this V1ImageSourcePath.
        SourcePath is the absolute path of the file or directory inside the image to copy to the build directory.

        :param source_path: The source_path of this V1ImageSourcePath.
        :type: str
        """

        self._source_path = source_path

    @property
    def destination_dir(self):
        """
        Gets the destination_dir of this V1ImageSourcePath.
        DestinationDir is the relative directory within the build directory where files copied from the image are placed.

        :return: The destination_dir of this V1ImageSourcePath.
        :rtype: str
        """
        return self._destination_dir

    @destination_dir.setter
    def destination_dir(self, destination_dir):
        """
        Sets the destination_dir of this V1ImageSourcePath.
        DestinationDir is the relative directory within the build directory where files copied from the image are placed.

        :param destination_dir: The destination_dir of this V1ImageSourcePath.
        :type: str
        """

        self._destination_dir = destination_dir

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1ImageSourcePath.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
