# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1Parameter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'value': 'str',
        'generate': 'str',
        '_from': 'str',
        'required': 'bool'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'value': 'value',
        'generate': 'generate',
        '_from': 'from',
        'required': 'required'
    }

    def __init__(self, name=None, display_name=None, description=None, value=None, generate=None, _from=None, required=None):
        """
        V1Parameter - a model defined in Swagger

        """

        self._name = name
        self._display_name = display_name
        self._description = description
        self._value = value
        self._generate = generate
        self.__from = _from
        self._required = required

    @property
    def name(self):
        """
        Gets the name of this V1Parameter.
        Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.

        :return: The name of this V1Parameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1Parameter.
        Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.

        :param name: The name of this V1Parameter.
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this V1Parameter.
        Optional: The name that will show in UI instead of parameter 'Name'

        :return: The display_name of this V1Parameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this V1Parameter.
        Optional: The name that will show in UI instead of parameter 'Name'

        :param display_name: The display_name of this V1Parameter.
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """
        Gets the description of this V1Parameter.
        Description of a parameter. Optional.

        :return: The description of this V1Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this V1Parameter.
        Description of a parameter. Optional.

        :param description: The description of this V1Parameter.
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """
        Gets the value of this V1Parameter.
        Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.

        :return: The value of this V1Parameter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this V1Parameter.
        Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.

        :param value: The value of this V1Parameter.
        :type: str
        """

        self._value = value

    @property
    def generate(self):
        """
        Gets the generate of this V1Parameter.
        Generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.

        :return: The generate of this V1Parameter.
        :rtype: str
        """
        return self._generate

    @generate.setter
    def generate(self, generate):
        """
        Sets the generate of this V1Parameter.
        Generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.

        :param generate: The generate of this V1Parameter.
        :type: str
        """

        self._generate = generate

    @property
    def _from(self):
        """
        Gets the _from of this V1Parameter.
        From is an input value for the generator. Optional.

        :return: The _from of this V1Parameter.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this V1Parameter.
        From is an input value for the generator. Optional.

        :param _from: The _from of this V1Parameter.
        :type: str
        """

        self.__from = _from

    @property
    def required(self):
        """
        Gets the required of this V1Parameter.
        Optional: Indicates the parameter must have a value.  Defaults to false.

        :return: The required of this V1Parameter.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this V1Parameter.
        Optional: Indicates the parameter must have a value.  Defaults to false.

        :param required: The required of this V1Parameter.
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1Parameter.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
