# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1TagImageHook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'container_name': 'str',
        'to': 'V1ObjectReference'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'container_name': 'containerName',
        'to': 'to'
    }

    def __init__(self, container_name=None, to=None):
        """
        V1TagImageHook - a model defined in Swagger

        """

        self._container_name = container_name
        self._to = to

    @property
    def container_name(self):
        """
        Gets the container_name of this V1TagImageHook.
        ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.

        :return: The container_name of this V1TagImageHook.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """
        Sets the container_name of this V1TagImageHook.
        ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.

        :param container_name: The container_name of this V1TagImageHook.
        :type: str
        """

        self._container_name = container_name

    @property
    def to(self):
        """
        Gets the to of this V1TagImageHook.
        To is the target ImageStreamTag to set the container's image onto.

        :return: The to of this V1TagImageHook.
        :rtype: V1ObjectReference
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this V1TagImageHook.
        To is the target ImageStreamTag to set the container's image onto.

        :param to: The to of this V1TagImageHook.
        :type: V1ObjectReference
        """

        self._to = to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1TagImageHook.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
