# coding: utf-8

"""
    

    

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1SecretSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    operations = [
    ]

    # The key is attribute name
    # and the value is attribute type.
    swagger_types = {
        'secret_source': 'V1LocalObjectReference',
        'mount_path': 'str'
    }

    # The key is attribute name
    # and the value is json key in definition.
    attribute_map = {
        'secret_source': 'secretSource',
        'mount_path': 'mountPath'
    }

    def __init__(self, secret_source=None, mount_path=None):
        """
        V1SecretSpec - a model defined in Swagger

        """

        self._secret_source = secret_source
        self._mount_path = mount_path

    @property
    def secret_source(self):
        """
        Gets the secret_source of this V1SecretSpec.
        SecretSource is a reference to the secret

        :return: The secret_source of this V1SecretSpec.
        :rtype: V1LocalObjectReference
        """
        return self._secret_source

    @secret_source.setter
    def secret_source(self, secret_source):
        """
        Sets the secret_source of this V1SecretSpec.
        SecretSource is a reference to the secret

        :param secret_source: The secret_source of this V1SecretSpec.
        :type: V1LocalObjectReference
        """

        self._secret_source = secret_source

    @property
    def mount_path(self):
        """
        Gets the mount_path of this V1SecretSpec.
        MountPath is the path at which to mount the secret

        :return: The mount_path of this V1SecretSpec.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """
        Sets the mount_path of this V1SecretSpec.
        MountPath is the path at which to mount the secret

        :param mount_path: The mount_path of this V1SecretSpec.
        :type: str
        """

        self._mount_path = mount_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(V1SecretSpec.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
